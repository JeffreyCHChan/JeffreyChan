# -*- coding: utf-8 -*-
"""LCS Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/130b4nXBRmonSDAAkKfj3YKKDnqtYb3K0
"""

from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
from sklearn import model_selection
import tensorflow.compat.v2.feature_column as fc

import tensorflow as tf

df = pd.read_excel("https://docs.google.com/spreadsheets/d/e/2PACX-1vQIWFpGeA2"
"QbBa0x5iNNmlltKs49gNxn5CAsXUHU56V_ik7ZP_r8ns23V_uE4f4Dg/pub?output=xlsx")
#all of data but we will need to redo it to handle for Nan
#open sheet in drive,change file type to needed one, publish then use the link

dftrain, dfeval = model_selection.train_test_split(df,train_size=0.2,test_size=0.8,shuffle = True)

y_train = dftrain["result"]
y_eval = dfeval["result"]

feature_columns = []
for feature_name in df:
  feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))
feature_columns.pop(2) #removed result from feature list

def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=50):
  def input_function():  # inner function, this will be returned
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))  # create tf.data.Dataset object with data and its label
    if shuffle:
      ds = ds.shuffle(1000)  # randomize order of data
    ds = ds.batch(batch_size).repeat(num_epochs)  # split dataset into batches of 32 and repeat process for number of epochs
    return ds  # return a batch of the dataset
  return input_function  # return a function object for use

train_input_fn = make_input_fn(dftrain, y_train)  # here we will call the input_function that was returned to us to get a dataset object we can feed to the model
eval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=5, shuffle=True)

linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns) #check for result and remove it

linear_est.train(train_input_fn)  # train
result = linear_est.evaluate(eval_input_fn)  # get model metrics/stats by testing on testing data

clear_output()  # clears consoke output
print(result['accuracy'])  # the result variable is simply a dict of stats about our model

pred_dicts = list(linear_est.predict(eval_input_fn))
probs = pd.Series([pred['probabilities'][1] for pred in pred_dicts])

probs.plot(kind='hist', bins=20, title='predicted probabilities')